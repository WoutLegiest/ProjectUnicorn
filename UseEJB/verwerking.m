pkg load signal 
data = [0.9426708, 1.021101, 1.0210876, 0.903388, 0.9425926, 0.9033489, 1.021019, 0.9425373, 0.9032965, 0.9032736, 0.8640213, 0.9816952, 0.98168087, 0.9816761, 1.0208864, 1.020853, 0.9423895, 0.9423628, 1.0600185, 1.0207834, 0.98153496, 0.98150635, 0.98149014, 0.98145294, 0.90298176, 0.9814205, 0.90295506, 0.98138046, 0.9813709, 0.94214344, 0.9421253, 0.9421072, 0.94210243, 0.9028578, 0.9813099, 1.0205259, 0.9812832, 0.9420414, 0.9420309, 0.9420347, 1.0204697, 1.0204592, 0.9419966, 0.86353874, 0.94198036, 0.94196606, 0.98117447, 0.9811735, 1.0203943, 1.0203791, 0.94192314, 1.0595942, 0.9811344, 1.0203552, 0.94190216, 1.0595827, 0.9811268, 0.98111916, 0.98111343, 0.90266705, 0.90266037, 0.9026499, 0.90264034, 1.0595379, 1.0203066, 0.9810772, 1.020299, 0.9810667, 0.9026079, 0.8633776, 0.98105335, 0.98104763, 0.9810381, 0.98103523, 0.94180775, 0.9418001, 0.9810209, 1.0594645, 0.9417763, 0.980999, 1.0594492, 1.0594606, 0.9417772, 0.90254116, 1.0202236, 0.9025364, 0.90253353, 1.0594349, 0.98098373, 0.86330223, 0.9809847, 0.86330414, 0.98097897, 0.9809818, 0.9025383, 0.94177055, 1.0202255, 1.0202265, 0.98100376, 0.9025469, 0.9809952, 0.94176865, 0.9809942, 0.9809971, 1.0202246, 0.94177055, 1.0202198, 0.8633175, 0.980999, 0.98099613, 0.8633251, 0.902544, 0.9025488, 0.94178104, 0.9810076, 0.94178104, 0.9417677, 0.94176865, 1.0202227, 0.9809923, 0.9417696, 0.94177055, 0.9809933, 0.980999, 1.0202284, 0.9417677, 1.020215, 0.94175243, 0.9417496, 0.90252304, 0.98097324, 0.86329746, 1.0201969, 0.9417448, 0.9417486, 1.0201969, 0.90252113, 0.8632965, 0.9025183, 0.8632908, 0.8632946, 0.9809685, 0.9025135, 0.9417362, 0.9417362, 0.9809618, 1.0201902, 0.9417324, 1.0201864, 0.98096275, 0.8632784, 0.9417343, 1.059413, 0.94174004, 1.0201826, 0.9809599, 0.980958, 0.9025049, 0.9025068, 1.0201826, 1.0201759, 0.9024992, 0.902503, 0.9417362, 0.94173527, 0.90250206, 0.90250397, 1.0201845, 0.94172764, 0.9417286, 0.90250015, 1.0594034, 0.90249634, 0.90248775, 0.9024868, 0.94171524, 1.0201683, 0.9024849, 0.8632593, 0.9024887, 0.94172287, 0.9417238, 0.98094463, 0.8240347, 0.98095036, 1.0201797, 1.0594091, 1.0201912, 1.0201893, 0.9417391, 0.98096275, 0.94173336, 1.0986433, 0.9025135, 0.9809685, 0.8632889, 0.94174385, 0.9809809, 1.0202122, 0.9809885, 0.90253544, 1.020216, 0.9809847, 0.94175816, 1.0202093, 0.9025316, 1.0202188, 0.9025316, 0.9809809, 0.90252304, 0.9417515, 0.9417372, 0.9809599, 0.980958, 0.9809475, 0.98094845, 0.94173145, 0.9809532, 0.90248966, 0.94171524, 0.9417162, 1.0201674, 0.94170856, 0.98093224, 0.9417057, 0.9024792, 0.9024849, 0.94171333, 0.82403564, 0.94171906, 0.90250015, 1.0593987, 0.94172096, 0.9809351, 0.90247726, 0.9809303, 0.9417076, 0.9417114, 0.86325455, 0.9809303, 0.9024868, 0.980937, 1.0593948, 0.94171333, 0.9809475, 1.0201836, 0.9417286, 0.9417324, 0.980958, 0.94173145, 1.0594091, 0.82405186, 0.9417362, 0.90250874, 0.94174194, 0.9417467, 0.9417496, 0.9809828, 0.94175625, 0.86331177, 0.9809866, 0.9809923, 0.94175816, 0.90253925, 0.90253544, 0.98099804, 0.9417772, 0.82410336, 0.9025593, 0.9417877, 1.0202475, 1.0202494, 0.9810171, 0.98101807, 0.9025812, 0.90259457, 0.90258694, 1.020277, 0.9810505, 0.94183064, 0.9026098, 1.020298, 0.90262985, 1.0203228, 1.0987778, 1.0595541, 1.0203304, 0.9026737, 1.0203571, 0.981143, 1.0203724, 0.9419193, 1.0203781, 1.0203876, 0.9419365, 0.9419365, 0.9419441, 0.94194317, 1.020402, 0.9027281, 0.981184, 0.8635063, 0.9419718, 0.9812174, 0.98122597, 0.9812231, 0.981225, 0.9812298, 1.0596781, 1.0596838, 0.86356354, 0.86355495, 0.82433605, 0.94201946, 0.9027891, 0.9420166, 0.94201946, 0.94202614, 0.94202995, 0.9028168, 0.94205475, 1.0597448, 0.9028435, 0.94207287, 0.90284157, 0.9028311, 0.9812813, 1.0205154, 1.020505, 0.9420595, 0.9420681, 0.78517246, 0.94208527, 0.9028425, 0.9812994, 0.90285206, 0.9028635, 0.9028616, 1.0205393, 0.98131084, 0.90285873, 0.9421072, 0.9813442, 0.9028959, 0.86367226, 0.94213295, 0.90290165, 0.9421282, 0.9813509, 1.0205908, 0.8636875, 0.9421463, 1.0206013, 0.9813957, 0.9813881, 0.94215584, 1.0598364, 1.0206146, 0.9029398, 0.9029465, 0.9814024, 0.90294075, 0.98140144, 0.9814205, 0.94220257, 0.94219685, 0.94219875, 0.9814253, 0.86375904, 0.98144054, 0.9422045, 0.98143005, 0.9029703, 0.902977, 0.90296364, 0.9029741, 0.9029703, 0.9814148, 0.9814272, 1.0598669, 0.98141, 0.9814081, 0.9421768, 0.94217205, 0.902956, 0.9814062, 1.0598593, 0.9029522, 0.94218445, 1.0206327, 0.9814129, 0.94219875, 0.942214, 0.942214, 1.0206718, 1.0206699, 0.9814453, 0.94222546, 0.94222164, 0.90300465, 0.94223213, 1.0206604, 0.9422016, 0.942194, 0.94219685, 0.9421854, 0.8637409, 0.9422016, 0.9422159, 0.98142624, 1.0206385, 0.9813957, 1.0598421, 0.9813986, 0.981411, 0.98140717, 0.94218254, 0.90296364, 0.8637419, 0.9421978, 0.94219494, 0.9814367, 0.9814396, 0.9422178, 0.9814577, 0.86377716, 0.8637934, 0.9814749, 1.0207024, 0.86379147, 0.942255, 1.0599651, 1.020772, 1.0207891, 0.9423733, 1.0208588, 0.94242287, 0.86397743, 0.9424248, 0.9424143, 0.9816313, 0.9816208, 0.66780186, 1.0600653, 0.8639345, 0.90318584, 0.86398697]; 
endData = length(data) -1 ; 
 endData = endData*0.01; 
 t = 0:0.01:endData; 
 %% Step 1: resample at fixed time step 
Fs = 100.; % desired (fixed) sample rate 
%[data_resampled,t_resampled] = resample(data,t,Fs); 
t_resampled = t(1):1/Fs:t(end); 
data_resampled = interp1(t, data, t_resampled, 'spline'); 
% to make sure time starts at t = 0s: 
t_resampled = t_resampled - t_resampled(1); 
%% Step 2: Compute amplitude spectrum of the signal 
L = length(data_resampled); 
f = Fs*(0:(L/2))/L; 
A2_data = fft(data_resampled); A2 = abs(A2_data/L); 
A_data = A2(1:L/2+1); A_data(2:end-1) = 2*A_data(2:end-1); 
maxi = max(A_data); 
k = find(A_data==maxi); 
disp(f(k)); 
disp('fase'); 
disp(A_data); 
disp('fase'); 
disp(f); 
disp('fase'); 
%% Step 3: Apply bandbass filter 
% Lowerbound and upperbound cutoff bandpass filter (relative to Nyquist frequency) 
f1 = 1/Fs*2; f2 = 4/Fs*2; 
% [b,a] = butter(n,Wn,ftype) 
filter_order = 4; 
[b,a] = butter(filter_order,[f1 f2]); 
data_filtered = filtfilt(b,a,data_resampled); 
A2_data = fft(data_filtered); A2 = abs(A2_data/L); 
A_data = A2(1:L/2+1); A_data(2:end-1) = 2*A_data(2:end-1); 
maxi = max(A_data); 
k = find(A_data==maxi); 
disp(f(k)); 
disp('fase'); 
disp(A_data); 
